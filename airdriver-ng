#!/bin/bash

USERID=""

#run as root?

if [ x"`which id 2> /dev/null`" != "x" ]
then
	USERID="`id -u 2> /dev/null`"
fi

if [ x$USERID = "x" -a x$UID != "x" ]
then
	USERID=$UID
fi

if [ x$USERID != "x" -a x$USERID != "x0" ]
then
	echo Run it as root ; exit ;
fi

#getting commands
LSPCMCIA=`which lspcmcia 2>/dev/null`
IWCONFIG=`which iwconfig 2>/dev/null`
MODPROBE=`which modprobe 2>/dev/null`
RMMOD=`which rmmod 2>/dev/null`
PATCH=`which patch 2>/dev/null`
LSPCI=`which lspci 2>/dev/null`
LSUSB=`which lsusb 2>/dev/null`
WGET=`which wget 2>/dev/null`
MAKE=`which make 2>/dev/null`
GCC=`which gcc 2>/dev/null`
TAR=`which tar 2>/dev/null`
UNZIP=`which unzip 2>/dev/null`

#global variables
if [ x"$KVER" == x ]
then
    KVER=`uname -r`
fi
KMAJOR=`echo $KVER | sed 's/^\([0-9]\)\..*$/\1/'`
KMINOR=`echo $KVER | sed 's/^[0-9]\.\([0-9]\)\..*$/\1/'`
KPATCH=`echo $KVER | sed 's/^[0-9]\.[0-9]\.\([0-9]*\).*$/\1/'`

D_DIR="/usr/src/drivers"
LOGFILE="/var/log/airdriver"

YES=1
NO=0
ERROR=255


#drivers
#DCOUNT = Number of known drivers
#DNAME[x] = Driver name to be displayed
#DMODULE[x] = Main module name to recognise installed/loaded status (complete name without trailing ".ko")
#DCONFIG[x] = Configure variable in kernel config file
#DMODULES[x] = All modules used by the driver (complete name without trailing ".ko")
#DINSTALL[x] = Function to d/l, patch and install the driver
#DSITE[x] = Website with more information about the driver
#DETECT_X[x] = string to grep for while detecting devices: lsusb -v, lspci and lspcmcia -v

DCOUNT=17

DNAME[0]="ACX100/111"
DMODULE[0]="acx"
DCONFIG[0]=""
DMODULES[0]="acx"
DI_INIT[0]=""
DI_DRIVERFILE[0]="acx-20070101.tar.bz2"
DI_DRIVERPATH1[0]="http://www.cmartin.tk/acx/acx-20070101.tar.bz2"
DI_DRIVERPATH2[0]=""
DI_DRIVEREXDIR[0]=""
DI_DRIVERDIR[0]="acx-20070101"
DI_PREPATCH[0]=""
DI_PATCHFILE[0]="acx-20070101.patch"
DI_PATCHPATH1[0]="http://patches.aircrack-ng.org/acx-20070101.patch"
DI_PATCHPATH2[0]="http://patches.aircrack-ng.org/old/acx-20070101.patch"
DI_PATCHARG[0]="-p1"
DI_PRECOMP[0]=""
DI_COMPILE[0]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[0]} modules"
DI_INSTALL1[0]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/acx/""
DI_INSTALL2[0]="cp acx.ko /lib/modules/$KVER/kernel/drivers/net/wireless/acx/"
DSITE[0]="http://www.aircrack-ng.org/doku.php?id=acx"
DETECT_USB[0]=""
DETECT_PCI[0]="ACX"
DETECT_CS[0]="ACX"

DNAME[1]="Broadcom 4300"
DMODULE[1]="bcm43xx"
DCONFIG[1]="CONFIG_BCM43XX="
DMODULES[1]="bcm43xx"
DI_INIT[1]=""
DI_DRIVERFILE[1]="linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH1[1]="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH2[1]="ftp://ftp.de.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVEREXDIR[1]="linux-$KMAJOR.$KMINOR.$KPATCH/drivers/net/wireless/bcm43xx"
DI_DRIVERDIR[1]="bcm43xx"
DI_PREPATCH[1]=""
DI_PATCHFILE[1]="bcm43xx-injection-linux-2.6.20.patch"
DI_PATCHPATH1[1]="http://trac.aircrack-ng.org/attachment/ticket/183/bcm43xx-injection-linux-2.6.20.patch?format=raw"
DI_PATCHPATH2[1]=""
DI_PATCHARG[1]="-p5"
DI_PRECOMP[1]=""
DI_COMPILE[1]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[1]} modules"
DI_INSTALL1[1]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/bcm43xx/""
DI_INSTALL2[1]="cp bcm43xx.ko /lib/modules/$KVER/kernel/drivers/net/wireless/bcm43xx/"
DSITE[1]="http://www.aircrack-ng.org/doku.php?id=broadcom"
DETECT_USB[1]=""
DETECT_PCI[1]="BCM43"
DETECT_CS[1]="BCM43"

DNAME[2]="HostAP"
DMODULE[2]="hostap"
DCONFIG[2]="CONFIG_HOSTAP="
DMODULES[2]="hostap_pci hostap_plx hostap_cs hostap"
DI_INIT[2]="install_hostap"
DI_DRIVERFILE[2]="linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH1[2]="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH2[2]="ftp://ftp.de.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVEREXDIR[2]="linux-$KMAJOR.$KMINOR.$KPATCH/drivers/net/wireless/hostap"
DI_DRIVERDIR[2]="hostap"
DI_PREPATCH[2]=""
DI_PATCHFILE[2]="hostap-kernel-$KMAJOR.$KMINOR.$KPATCH.patch"
DI_PATCHPATH1[2]="http://patches.aircrack-ng.org/hostap-kernel-$KMAJOR.$KMINOR.$KPATCH.patch"
DI_PATCHPATH2[2]="http://patches.aircrack-ng.org/old/hostap-kernel-$KMAJOR.$KMINOR.$KPATCH.patch"
DI_PATCHARG[2]="-p5"
DI_PRECOMP[2]=""
DI_COMPILE[2]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[2]} modules"
DI_INSTALL1[2]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/hostap/""
DI_INSTALL2[2]="cp *.ko /lib/modules/$KVER/kernel/drivers/net/wireless/hostap/"
DSITE[2]="http://www.aircrack-ng.org/doku.php?id=hostap"
DETECT_USB[2]="prism2"
DETECT_PCI[2]="Intersil\|Prism"
DETECT_CS[2]="Wireless LAN"

DNAME[3]="Intel Pro Wireless 2100 B"
DMODULE[3]="ipw2100"
DCONFIG[3]="CONFIG_IPW2100="
DMODULES[3]="ipw2100"
DI_INIT[3]=""
DI_DRIVERFILE[3]="linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH1[3]="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH2[3]="ftp://ftp.de.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVEREXDIR[3]="linux-$KMAJOR.$KMINOR.$KPATCH/drivers/net/wireless"
DI_DRIVERDIR[3]="ipw2100"
DI_PREPATCH[3]=""
DI_PATCHFILE[3]=""
DI_PATCHPATH1[3]=""
DI_PATCHPATH2[3]=""
DI_PATCHARG[3]=""
DI_PRECOMP[3]="ipw2100_precomp"
DI_COMPILE[3]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[3]} modules"
DI_INSTALL1[3]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/ipw2100/""
DI_INSTALL2[3]="cp ipw2100.ko /lib/modules/$KVER/kernel/drivers/net/wireless/ipw2100/"
DSITE[3]=""
DETECT_USB[3]=""
DETECT_PCI[3]="2100"
DETECT_CS[3]=""

DNAME[4]="Intel Pro Wireless 2200 B/G"
DMODULE[4]="ipw2200"
DCONFIG[4]="CONFIG_IPW2200="
DMODULES[4]="ipw2200"
DI_INIT[4]="install_ipw2200"
DI_DRIVERFILE[4]="linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH1[4]="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH2[4]="ftp://ftp.de.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVEREXDIR[4]="linux-$KMAJOR.$KMINOR.$KPATCH/drivers/net/wireless"
DI_DRIVERDIR[4]="ipw2200"
DI_PREPATCH[4]=""
DI_PATCHFILE[4]="ipw2200-1.1.4-inject.patch"
DI_PATCHPATH1[4]="http://patches.aircrack-ng.org/ipw2200-1.1.4-inject.patch"
DI_PATCHPATH2[4]="http://patches.aircrack-ng.org/old/ipw2200-1.1.4-inject.patch"
DI_PATCHARG[4]="-p1 -f"
DI_PRECOMP[4]="ipw2200_precomp"
DI_COMPILE[4]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[4]} modules"
DI_INSTALL1[4]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/ipw2200/""
DI_INSTALL2[4]="cp ipw2200.ko /lib/modules/$KVER/kernel/drivers/net/wireless/ipw2200/"
DSITE[4]="http://www.aircrack-ng.org/doku.php?id=ipw2200"
DETECT_USB[4]=""
DETECT_PCI[4]="2200BG"
DETECT_CS[4]=""

DNAME[5]="Intel Pro Wireless 3945 A/B/G"
DMODULE[5]="ipw3945"
DCONFIG[5]=""
DMODULES[5]="ipw3945"
DI_INIT[5]=""
DI_DRIVERFILE[5]=""
DI_DRIVERPATH1[5]=""
DI_DRIVERPATH2[5]=""
DI_DRIVEREXDIR[5]=""
DI_DRIVERDIR[5]=""
DI_PREPATCH[5]=""
DI_PATCHFILE[5]=""
DI_PATCHPATH1[5]=""
DI_PATCHPATH2[5]=""
DI_PATCHARG[5]=""
DI_PRECOMP[5]=""
DI_COMPILE[5]=""
DI_INSTALL1[5]=""
DI_INSTALL2[5]=""
DSITE[5]="http://www.aircrack-ng.org/doku.php?id=ipw3945"
DETECT_USB[5]=""
DETECT_PCI[5]="3945"
DETECT_CS[5]=""

DNAME[6]="Madwifi[-ng]"
DMODULE[6]="ath_pci"
DCONFIG[6]=""
DMODULES[6]="wlan_wep ath_rate_sample ath_rate_onoe ath_pci ath_hal ath_rate_amrr ath_rate_minstrel wlan_xauth wlan_tkip wlan_ccmp wlan_acl wlan wlan_scan_ap wlan_scan_sta"
DI_INIT[6]=""
DI_DRIVERFILE[6]="madwifi-ng-r2438-20070613.tar.gz"
DI_DRIVERPATH1[6]="http://snapshots.madwifi.org/madwifi-ng/madwifi-ng-r2438-20070613.tar.gz"
DI_DRIVERPATH2[6]=""
DI_DRIVEREXDIR[6]=""
DI_DRIVERDIR[6]="madwifi-ng-r2438-20070613"
DI_PREPATCH[6]=""
DI_PATCHFILE[6]="madwifi-ng-r2277.patch"
DI_PATCHPATH1[6]="http://patches.aircrack-ng.org/madwifi-ng-r2277.patch"
DI_PATCHPATH2[6]="http://patches.aircrack-ng.org/old/madwifi-ng-r2277.patch"
DI_PATCHARG[6]="-p1"
DI_PRECOMP[6]="export KERNELRELEASE=$KVER"
DI_COMPILE[6]="$MAKE"
DI_INSTALL1[6]="madwifi_install"
DI_INSTALL2[6]=""
DSITE[6]="http://www.aircrack-ng.org/doku.php?id=madwifi-ng"
DETECT_USB[6]=""
DETECT_PCI[6]="Atheros"
DETECT_CS[6]="-i atheros"

DNAME[7]="Prism54"
DMODULE[7]="prism54"
DCONFIG[7]="CONFIG_PRISM54="
DMODULES[7]="prism54"
DI_INIT[7]=""
DI_DRIVERFILE[7]="prism54_r531.tar.gz"
DI_DRIVERPATH1[7]="http://svnweb.tuxfamily.org/dl.php?repname=prism54+%28prism54%29&path=%2Ftrunk%2F&rev=531&isdir=1"
DI_DRIVERPATH2[7]=""
DI_DRIVEREXDIR[7]=""
DI_DRIVERDIR[7]="trunk"
DI_PREPATCH[7]=""
DI_PATCHFILE[7]="prism54-svn-20050724.patch"
DI_PATCHPATH1[7]="http://patches.aircrack-ng.org/prism54-svn-20050724.patch"
DI_PATCHPATH2[7]="http://patches.aircrack-ng.org/old/prism54-svn-20050724.patch"
DI_PATCHARG[7]="-p1"
DI_PRECOMP[7]=""
DI_COMPILE[7]="$MAKE modules"
DI_INSTALL1[7]="$MAKE install"
DI_INSTALL2[7]=""
DSITE[7]="http://www.aircrack-ng.org/doku.php?id=prism54"
DETECT_USB[7]=""
DETECT_PCI[7]="Prism Javelin\|Prism Xbow\|Prism GT\|Prism Duette"
DETECT_CS[7]=""

DNAME[8]="Realtek rtl8180"
DMODULE[8]="r818x"
DCONFIG[8]=""
DMODULES[8]="r818x"
DI_INIT[8]=""
DI_DRIVERFILE[8]="rtl8180-0.21.tar.gz"
DI_DRIVERPATH1[8]="http://ovh.dl.sourceforge.net/sourceforge/rtl8180-sa2400/rtl8180-0.21.tar.gz"
DI_DRIVERPATH2[8]=""
DI_DRIVEREXDIR[8]=""
DI_DRIVERDIR[8]="rtl8180-0.21"
DI_PREPATCH[8]=""
DI_PATCHFILE[8]="rtl8180-0.21v2.patch"
DI_PATCHPATH1[8]="http://patches.aircrack-ng.org/rtl8180-0.21v2.patch"
DI_PATCHPATH2[8]="http://patches.aircrack-ng.org/old/rtl8180-0.21v2.patch"
DI_PATCHARG[8]="-p1"
DI_PRECOMP[8]=""
DI_COMPILE[8]="$MAKE"
DI_INSTALL1[8]="$MAKE install"
DI_INSTALL2[8]=""
DSITE[8]="http://www.aircrack-ng.org/doku.php?id=r8180-sa2400"
DETECT_USB[8]=""
DETECT_PCI[8]=""
DETECT_CS[8]=""

DNAME[9]="Realtek rtl8187"
DMODULE[9]="r8187"
DCONFIG[9]=""
DMODULES[9]="r8187"
DI_INIT[9]=""
DI_DRIVERFILE[9]="rtl8187_linux_26.1010.zip"
DI_DRIVERPATH1[9]="ftp://220.228.150.22/cn/wlan/rtl8187_linux_26.1010.zip"
DI_DRIVERPATH2[9]="ftp://61.56.86.122/cn/wlan/rtl8187_linux_26.1010.zip"
DI_DRIVEREXDIR[9]=""
DI_DRIVERDIR[9]="rtl8187_linux_26.1010.0622.2006"
DI_PREPATCH[9]="rtl8187_prepatch"
DI_PATCHFILE[9]="rtl8187_2.6.21.patch"
DI_PATCHPATH1[9]="http://patches.aircrack-ng.org/rtl8187_2.6.21.patch"
DI_PATCHPATH2[9]="http://patches.aircrack-ng.org/old/rtl8187_2.6.21.patch"
DI_PATCHARG[9]="-p1"
DI_PRECOMP[9]=""
DI_COMPILE[9]="$MAKE"
DI_INSTALL1[9]="$MAKE install"
DI_INSTALL2[9]=""
DSITE[9]="http://www.aircrack-ng.org/doku.php?id=r8187"
DETECT_USB[9]="RTL8187"
DETECT_PCI[9]=""
DETECT_CS[9]=""

DNAME[10]="Ralink rt2500"
DMODULE[10]="rt2500"
DCONFIG[10]=""
DMODULES[10]="rt2500"
DI_INIT[10]=""
DI_DRIVERFILE[10]="rt2500-1.1.0-b4.tar.gz"
DI_DRIVERPATH1[10]="http://prdownloads.sourceforge.net/rt2400/rt2500-1.1.0-b4.tar.gz?download"
DI_DRIVERPATH2[10]="http://prdownloads.sourceforge.net/rt2400/rt2500-1.1.0-b4.tar.gz?download"
DI_DRIVEREXDIR[10]=""
DI_DRIVERDIR[10]="rt2500-1.1.0-b4/Module"
DI_PREPATCH[10]=""
DI_PATCHFILE[10]=""
DI_PATCHPATH1[10]=""
DI_PATCHPATH2[10]=""
DI_PATCHARG[10]=""
DI_PRECOMP[10]=""
DI_COMPILE[10]="$MAKE"
DI_INSTALL1[10]="$MAKE install"
DI_INSTALL2[10]=""
DSITE[10]="http://www.aircrack-ng.org/doku.php?id=rt2500"
DETECT_USB[10]=""
DETECT_PCI[10]=""
DETECT_CS[10]=""

DNAME[11]="Ralink rt2570"
DMODULE[11]="rt2570"
DCONFIG[11]=""
DMODULES[11]="rt2570"
DI_INIT[11]=""
DI_DRIVERFILE[11]="rt2570-k2wrlz-1.6.0.tar.bz2"
DI_DRIVERPATH1[11]="http://homepages.tu-darmstadt.de/~p_larbig/wlan/rt2570-k2wrlz-1.6.0.tar.bz2"
DI_DRIVERPATH2[11]=""
DI_DRIVEREXDIR[11]=""
DI_DRIVERDIR[11]="rt2570-k2wrlz-1.6.0/Module"
DI_PREPATCH[11]=""
DI_PATCHFILE[11]=""
DI_PATCHPATH1[11]=""
DI_PATCHPATH2[11]=""
DI_PATCHARG[11]=""
DI_PRECOMP[11]=""
DI_COMPILE[11]="$MAKE"
DI_INSTALL1[11]="$MAKE install"
DI_INSTALL2[11]=""
DSITE[11]="http://www.aircrack-ng.org/doku.php?id=rt2570"
DETECT_USB[11]="G122 802.11g rev. B1"
DETECT_PCI[11]=""
DETECT_CS[11]=""

DNAME[12]="Ralink rt61"
DMODULE[12]="rt61"
DCONFIG[12]=""
DMODULES[12]="rt61"
DI_INIT[12]=""
DI_DRIVERFILE[12]="rt61-1.1.0-b2.tar.gz"
DI_DRIVERPATH1[12]="http://prdownloads.sourceforge.net/rt2400/rt61-1.1.0-b2.tar.gz?download"
DI_DRIVERPATH2[12]="http://prdownloads.sourceforge.net/rt2400/rt61-1.1.0-b2.tar.gz?download"
DI_DRIVEREXDIR[12]=""
DI_DRIVERDIR[12]="rt61-1.1.0-b2/Module"
DI_PREPATCH[12]=""
DI_PATCHFILE[12]=""
DI_PATCHPATH1[12]=""
DI_PATCHPATH2[12]=""
DI_PATCHARG[12]=""
DI_PRECOMP[12]=""
DI_COMPILE[12]="$MAKE"
DI_INSTALL1[12]="$MAKE install"
DI_INSTALL2[12]=""
DSITE[12]="http://www.aircrack-ng.org/doku.php?id=rt61"
DETECT_USB[12]=""
DETECT_PCI[12]=""
DETECT_CS[12]=""

DNAME[13]="Ralink rt73"
DMODULE[13]="rt73"
DCONFIG[13]=""
DMODULES[13]="rt73"
DI_INIT[13]=""
DI_DRIVERFILE[13]="rt73-k2wrlz-1.0.0.tar.bz2"
DI_DRIVERPATH1[13]="http://homepages.tu-darmstadt.de/~p_larbig/wlan/rt73-k2wrlz-1.0.0.tar.bz2"
DI_DRIVERPATH2[13]=""
DI_DRIVEREXDIR[13]=""
DI_DRIVERDIR[13]="rt73-k2wrlz-1.0.0/Module"
DI_PREPATCH[13]=""
DI_PATCHFILE[13]=""
DI_PATCHPATH1[13]=""
DI_PATCHPATH2[13]=""
DI_PATCHARG[13]=""
DI_PRECOMP[13]=""
DI_COMPILE[13]="$MAKE"
DI_INSTALL1[13]="$MAKE install"
DI_INSTALL2[13]=""
DSITE[13]="http://www.aircrack-ng.org/doku.php?id=rt73"
DETECT_USB[13]=""
DETECT_PCI[13]=""
DETECT_CS[13]=""

DNAME[14]="WLAN-NG"
DMODULE[14]="prism2_pci"
DCONFIG[14]=""
DMODULES[14]="prism2_pci prism2_usb prism2_plx prism2_cs p80211"
DI_INIT[14]=""
DI_DRIVERFILE[14]="linux-wlan-ng-0.2.8.tar.bz2"
DI_DRIVERPATH1[14]="ftp://ftp.linux-wlan.org/pub/linux-wlan-ng/linux-wlan-ng-0.2.8.tar.bz2"
DI_DRIVERPATH2[14]=""
DI_DRIVEREXDIR[14]=""
DI_DRIVERDIR[14]="linux-wlan-ng-0.2.8"
DI_PREPATCH[14]=""
DI_PATCHFILE[14]="linux-wlan-ng-0.2.8.patch"
DI_PATCHPATH1[14]="http://patches.aircrack-ng.org/linux-wlan-ng-0.2.8.patch"
DI_PATCHPATH2[14]="http://patches.aircrack-ng.org/old/linux-wlan-ng-0.2.8.patch"
DI_PATCHARG[14]="-p1"
DI_PRECOMP[14]=""
DI_COMPILE[14]="$MAKE auto_config"
DI_INSTALL1[14]="$MAKE install"
DI_INSTALL2[14]=""
DSITE[14]="http://www.aircrack-ng.org/doku.php?id=wlan-ng"
DETECT_USB[14]=""
DETECT_PCI[14]=""
DETECT_CS[14]=""

DNAME[15]="ZyDAS 1211"
DMODULE[15]="zd1211"
DCONFIG[15]=""
DMODULES[15]="zd1211"
DI_INIT[15]=""
DI_DRIVERFILE[15]=""
DI_DRIVERPATH1[15]=""
DI_DRIVERPATH2[15]=""
DI_DRIVEREXDIR[15]=""
DI_DRIVERDIR[15]=""
DI_PREPATCH[15]=""
DI_PATCHFILE[15]=""
DI_PATCHPATH1[15]=""
DI_PATCHPATH2[15]=""
DI_PATCHARG[15]=""
DI_PRECOMP[15]=""
DI_COMPILE[15]=""
DI_INSTALL1[15]=""
DI_INSTALL2[15]=""
DSITE[15]=""
DETECT_USB[15]=""
DETECT_PCI[15]=""
DETECT_CS[15]=""

DNAME[16]="ZyDAS 1211rw"
DMODULE[16]="zd1211rw"
DCONFIG[16]="CONFIG_ZD1211RW="
DMODULES[16]="zd1211rw"
DI_INIT[16]="install_zd1211rw"
DI_DRIVERFILE[16]="linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH1[16]="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVERPATH2[16]="ftp://ftp.de.kernel.org/pub/linux/kernel/v2.6/linux-$KMAJOR.$KMINOR.$KPATCH.tar.bz2"
DI_DRIVEREXDIR[16]="linux-$KMAJOR.$KMINOR.$KPATCH/drivers/net/wireless/zd1211rw"
DI_DRIVERDIR[16]="zd1211rw"
DI_PREPATCH[16]=""
DI_PATCHFILE[16]="zd1211rw_inject_2.6.17.patch"
DI_PATCHPATH1[16]="http://patches.aircrack-ng.org/zd1211rw_inject_2.6.17.patch"
DI_PATCHPATH2[16]="http://patches.aircrack-ng.org/old/zd1211rw_inject_2.6.17.patch"
DI_PATCHARG[16]="-p1"
DI_PRECOMP[16]=""
DI_COMPILE[16]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[16]} modules"
DI_INSTALL1[16]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/zd1211rw/""
DI_INSTALL2[16]="cp zd1211rw.ko /lib/modules/$KVER/kernel/drivers/net/wireless/zd1211rw/"
DSITE[16]="http://www.aircrack-ng.org/doku.php?id=zd1211rw"
DETECT_USB[16]=""
DETECT_PCI[16]=""
DETECT_CS[16]=""
#END drivers

#init install scripts
install_hostap() {
    if [ $KMINOR -eq 6 -a $KPATCH -lt 16 ]
    then
        #use external driver 0.4.7
        DI_DRIVERFILE[$1]="hostap-driver-0.4.9.tar.gz"
        DI_DRIVERPATH1[2]="http://hostap.epitest.fi/releases/hostap-driver-0.4.9.tar.gz"
        DI_DRIVERPATH2[2]=""
        DI_DRIVEREXDIR[2]=""
        DI_DRIVERDIR[2]="hostap-driver-0.4.9"
        DI_PATCHFILE[2]="hostap-driver-0.4.9.patch"
        DI_PATCHPATH1[2]="http://patches.aircrack-ng.org/hostap-driver-0.4.9.patch"
        DI_PATCHPATH2[2]="http://patches.aircrack-ng.org/old/hostap-driver-0.4.9.patch"
        DI_PATCHARG[2]="-p1"
        DI_COMPILE[2]="$MAKE"
        DI_INSTALL1[2]="$MAKE install"
    fi

    if [ $KMINOR -eq 6 -a $KPATCH -gt 18 ]
    then
        DI_PATCHFILE[2]="hostap-kernel-2.6.18.patch"
        DI_PATCHPATH1[2]="http://patches.aircrack-ng.org/hostap-kernel-2.6.18.patch"
        DI_PATCHPATH2[2]="http://patches.aircrack-ng.org/old/hostap-kernel-2.6.18.patch"
    fi
}

install_ipw2200() {
    if [ $KMINOR -eq 6 -a $KPATCH -lt 15 ]
    then
        DI_DRIVERFILE[$1]="ipw2200-1.1.4.tgz"
        DI_DRIVERPATH1[$1]="http://prdownloads.sourceforge.net/ipw2200/ipw2200-1.1.4.tgz?download"
        DI_DRIVERPATH2[$1]="http://prdownloads.sourceforge.net/ipw2200/ipw2200-1.1.4.tgz?download"
        DI_DRIVEREXDIR[$1]=""
        DI_DRIVERDIR[$1]="ipw2200-1.1.4"
        DI_PRECOMP[$1]=""
        DI_COMPILE[$1]="$MAKE -C /lib/modules/$KVER/build/ M=$D_DIR/${DI_DRIVERDIR[2]} modules"
        DI_INSTALL1[$1]="mkdir -p "/lib/modules/$KVER/kernel/drivers/net/wireless/ipw2200/""
        DI_INSTALL2[$1]="cp ipw2200.ko /lib/modules/$KVER/kernel/drivers/net/wireless/ipw2200/"
    fi
}

install_zd1211rw() {
    if [ $KMINOR -eq 6 -a $KPATCH -eq 20 ]
    then
        DI_PATCHFILE[$1]="zd1211rw_inject_2.6.20.patch"
        DI_PATCHPATH1[$1]="http://patches.aircrack-ng.org/zd1211rw_inject_2.6.20.patch"
        DI_PATCHPATH2[$1]="http://patches.aircrack-ng.org/old/zd1211rw_inject_2.6.20.patch"
    fi

    if [ $KMINOR -eq 6 -a $KPATCH -ge 21 ]
    then
        DI_PATCHFILE[$1]="zd1211rw_inject_2.6.21-gentoo.patch"
        DI_PATCHPATH1[$1]="http://patches.aircrack-ng.org/zd1211rw_inject_2.6.21-gentoo.patch"
        DI_PATCHPATH2[$1]="http://patches.aircrack-ng.org/old/zd1211rw_inject_2.6.21-gentoo.patch"
    fi

}

madwifi_install() {
    echo i | $MAKE install
}

ipw2100_precomp() {
    echo 'obj-$(CONFIG_IPW2100) += ipw2100.o' > Makefile
}

ipw2200_precomp() {
    echo 'obj-$(CONFIG_IPW2200) += ipw2200.o' > Makefile
}

rtl8187_prepatch() {
    $TAR xzf stack.tar.gz
    $TAR xzf drv.tar.gz
}
#end

#install script doing the dirty work
#you're already in the correct dir
#old modules are unloaded
# 5 steps: get the source, get the patch, patch, compile, install
install_action() {
#write some info into log file
    echo "`date`" >> "$LOGFILE" 2>&1
    echo "Installing \"${DNAME[$1]}\" on $KVER." >> "$LOGFILE" 2>&1
#0 - check if all needed variables are set
    if [ x"${DI_DRIVERFILE[$1]}" == x ]
    then
        echo "DI_DRIVERFILE[$1] isn't set!"
        return $ERROR
    fi

    if [ x"${DI_DRIVERPATH1[$1]}" == x ]
    then
        echo "DI_DRIVERPATH1[$1] isn't set, you need at least one driver source!"
        return $ERROR
    fi

    if [ x"${DI_DRIVERDIR[$1]}" == x ]
    then
        echo "DI_DRIVERDIR[$1] isn't set!"
        return $ERROR
    fi

    if [ x"${DI_COMPILE[$1]}" == x ]
    then
        echo "DI_COMPILE[$1] isn't set!"
        return $ERROR
    fi

    if [ x"${DI_INSTALL1[$1]}" == x ]
    then
        echo "DI_INSTALL[$1] isn't set!"
        return $ERROR
    fi

#1 - get then correct source
    echo "1. Getting the source..."
    if [ ! -f "${DI_DRIVERFILE[$1]}" ]
    then
        $WGET -O "${DI_DRIVERFILE[$1]}" "${DI_DRIVERPATH1[$1]}" >> "$LOGFILE" 2>&1
        if [ "$?" != "0" ]
        then
            rm "${DI_DRIVERFILE[$1]}" 2>/dev/null
        fi
    fi

    if [ ! -f "${DI_DRIVERFILE[$1]}" -a x"${DI_DRIVERPATH2[$1]}" != x ]
    then
        $WGET -O "${DI_DRIVERFILE[$1]}" "${DI_DRIVERPATH2[$1]}" >> "$LOGFILE" 2>&1
        if [ "$?" != "0" ]
        then
            rm "${DI_DRIVERFILE[$1]}" 2>/dev/null
        fi
    fi

    if [ ! -f "${DI_DRIVERFILE[$1]}" ]
    then
        cp "`locate "${DI_DRIVERFILE[$1]}" | grep "${DI_DRIVERFILE[$1]}$" | head -n 1`" ./ >> "$LOGFILE" 2>&1
        if [ "$?" != "0" ]
        then
            rm "${DI_DRIVERFILE[$1]}" 2>/dev/null
        fi
    fi

    if [ ! -f "${DI_DRIVERFILE[$1]}" ]
    then
        echo "Couldn't find the correct driver file: ${DI_DRIVERFILE[$1]}"
        return $NO
    fi

    echo "2. Extracting the source..."
    if [ -d "${DI_DRIVERDIR[$1]}" ]
    then
        #be carefull!!
        rm -rf "${DI_DRIVERDIR[$1]}"
    fi

    if [ x"`echo "${DI_DRIVERFILE[$1]}" | grep ".tar.gz$"`" != x -o x"`echo "${DI_DRIVERFILE[$1]}" | grep ".tgz$"`" != x ]
    then
        $TAR xzf "${DI_DRIVERFILE[$1]}" "${DI_DRIVEREXDIR[$1]}" >> "$LOGFILE" 2>&1
    fi

    if [ x"`echo "${DI_DRIVERFILE[$1]}" | grep ".tar.bz2$"`" != x ]
    then
        $TAR xjf "${DI_DRIVERFILE[$1]}" "${DI_DRIVEREXDIR[$1]}" >> "$LOGFILE" 2>&1
    fi

    if [ x"`echo "${DI_DRIVERFILE[$1]}" | grep ".zip$"`" != x ]
    then
        $UNZIP "${DI_DRIVERFILE[$1]}" >> "$LOGFILE" 2>&1
    fi

    if [ $? != "0" ]
    then
        echo "Unable to \"extract ${DI_DRIVERFILE[$1]}\""
        return $NO
    fi

    if [ x"${DI_DRIVEREXDIR[$1]}" != x ]
    then
        mv "${DI_DRIVEREXDIR[$1]}" "${DI_DRIVERDIR[$1]}"
    fi

    if [ ! -d "${DI_DRIVERDIR[$1]}" ]
    then
        echo "Directory \"${DI_DRIVERDIR[$1]}\" doesn't exist."
        return $NO
    fi

    cd "${DI_DRIVERDIR[$1]}"

#2 - get the correct patch
    if [ x"${DI_PREPATCH[$1]}" != x ]
    then
        ${DI_PREPATCH[$1]} >> "$LOGFILE" 2>&1
    fi

    if [ x"${DI_PATCHFILE[$1]}" != x ]
    then
        echo "3. Getting the patch..."
        if [ ! -f "${DI_PATCHFILE[$1]}" ]
        then
            $WGET -O "${DI_PATCHFILE[$1]}" "${DI_PATCHPATH1[$1]}" >> "$LOGFILE" 2>&1
            if [ "$?" != "0" ]
            then
                rm "${DI_PATCHFILE[$1]}" 2>/dev/null
            fi
        fi

        if [ ! -f "${DI_PATCHFILE[$1]}" -a x"${DI_PATCHPATH2[$1]}" != x ]
        then
            $WGET -O "${DI_PATCHFILE[$1]}" "${DI_PATCHPATH2[$1]}" >> "$LOGFILE" 2>&1
            if [ "$?" != "0" ]
            then
                rm "${DI_PATCHFILE[$1]}" 2>/dev/null
            fi
        fi

        if [ ! -f "${DI_PATCHFILE[$1]}" ]
        then
            cp "`locate "${DI_PATCHFILE[$1]}" | grep "${DI_PATCHFILE[$1]}$" | head -n 1`" ./ >> "$LOGFILE" 2>&1
            if [ "$?" != "0" ]
            then
                rm "${DI_PATCHFILE[$1]}" 2>/dev/null
            fi
        fi

        if [ ! -f "${DI_PATCHFILE[$1]}" ]
        then
            echo "Couldn't find the correct patch: ${DI_PATCHFILE[$1]}"
            return $NO
        fi

    #3 - patch it
        echo "4. Patching the source..."

        if [ x"`$PATCH --dry-run -s -N ${DI_PATCHARG[$1]} -i "${DI_PATCHFILE[$1]}" | grep "FAILED"`" != x ]
        then
            $PATCH --dry-run -s -N ${DI_PATCHARG[$1]} -i "${DI_PATCHFILE[$1]}" >> "$LOGFILE" 2>&1
            echo "Patching failed for some hunks."
        fi

        if [ x"`$PATCH --dry-run -s -N ${DI_PATCHARG[$1]} -i "${DI_PATCHFILE[$1]}" | grep "Reversed"`" != x ]
        then
            $PATCH --dry-run -s -N ${DI_PATCHARG[$1]} -i "${DI_PATCHFILE[$1]}" >> "$LOGFILE" 2>&1
            echo "Already patched?"
        fi

        $PATCH -N ${DI_PATCHARG[$1]} -i "${DI_PATCHFILE[$1]}" >> "$LOGFILE" 2>&1
    else
        echo "3./4. Not patching..."
    fi

#4 - compile it
    if [ x"${DI_PRECOMP[$1]}" != x ]
    then
        ${DI_PRECOMP[$1]} >> "$LOGFILE" 2>&1
    fi

    echo "5. Compiling the driver..."
    PWD=`pwd`

    ${DI_COMPILE[$1]} >> "$LOGFILE" 2>&1
    if [ $? != "0" ]
    then
        return $NO
    fi

#TODO:INSTALL
    echo "6. Installing the driver..."
    ${DI_INSTALL1[$1]} >> "$LOGFILE" 2>&1
    if [ x"${DI_INSTALL2[$1]}" != x ]
    then
        ${DI_INSTALL2[$1]}
    fi

    if [ $? != "0" ]
    then
        return $NO
    fi

    return $YES
}
#END install scripts

isInstalled() {
    if [ $1 -lt 0 -o $1 -ge $DCOUNT ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

    if [ x"`$MODPROBE -l | grep ${DMODULE[$1]}"\.ko"`" != x ]
    then
        return $YES
    else
        return $NO
    fi
}

isLoaded() {
    if [ $1 -lt 0 -o $1 -ge $DCOUNT ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

    if [ x"`lsmod | grep ${DMODULE[$1]}" "`" != x ]
    then
        return $YES
    else
        return $NO
    fi
}

isInKernel() {
    if [ $1 -lt 0 -o $1 -ge $DCOUNT ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

    if [ x${DCONFIG[$1]} != x ]
    then
        if [ x"`grep ${DCONFIG[$1]}"y" "/lib/modules/"$KVER"/build/.config"`" != x ]
        then
            return $YES
        else
            return $NO
        fi
    else
        return $NO
    fi
}

listInstalledDrivers() {
    echo "Found following drivers installed:"
    i=0
    while [ $i -lt $DCOUNT ]
    do
        isInstalled $i
        if [ $? -eq $YES ]
        then
            echo $i. ${DNAME[$i]}
        fi
        i=$(($i+1))
    done

}

listLoadedDrivers() {
    echo "Found following drivers loaded (as module):"
    i=0
    while [ $i -lt $DCOUNT ]
    do
        isLoaded $i
        if [ $? -eq $YES ]
        then
            echo $i. ${DNAME[$i]}
        fi
        i=$(($i+1))
    done
}

listKernelDrivers() {
    echo "Found following drivers in the Kernel:"
    i=0
    while [ $i -lt $DCOUNT ]
    do
        isInKernel $i
        if [ $? -eq $YES ]
        then
            echo $i. ${DNAME[$i]}
        fi
        i=$(($i+1))
    done
}

listSupportedDrivers() {
    echo "Following drivers are supported:"
    i=0
    while [ $i -lt $DCOUNT ]
    do
        echo $i. ${DNAME[$i]}
        i=$(($i+1))
    done
}

unloadDriver() {
    if [ $1 -lt 0 -o $1 -ge $DCOUNT ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

    isLoaded $1
    if [ $? -eq $NO ]
    then
        echo "Driver isn't loaded."
        return $NO
    fi

    last=200
    current=0

    for i in ${DMODULES[$1]}
    do
        if [ x"`lsmod | grep $i" "`" != x ]
        then
            current=$(($current+1))
        fi
    done

    while [ $current -lt $last -a $current -gt 0 ]
    do
        last=$current
        current=0
        for i in ${DMODULES[$1]}
        do
            rmmod $i 2>/dev/null
            if [ x"`lsmod | grep $i" "`" != x ]
            then
                current=$(($current+1))
            fi
        done
    done

    if [ $current -eq 0 ]
    then
        return $YES
    else
        return $NO
    fi
}

loadDriver() {
    if [ $1 -lt 0 -o $1 -ge $DCOUNT ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

    isInKernel $1
    if [ $? -eq $YES ]
    then
        echo "Cannot load an in-kernel driver."
        return $NO
    fi

    isInstalled $1
    if [ $? -eq $NO ]
    then
        echo "Driver is not installed."
        return $NO
    fi

    isLoaded $1
    if [ $? -eq $YES ]
    then
        echo "Driver is already loaded."
        return $NO
    fi

    for i in ${DMODULES[$1]}
    do
        $MODPROBE $i 2>/dev/null
    done

    isLoaded $1
    if [ $? -eq $NO ]
    then
        return $NO
    fi

    return $YES
}

installDriver() {
#check if argument is out of range
    if [ $1 -lt 0 -o $1 -ge $DCOUNT ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

#check if atleast kernel headers are installed
    if [ ! -f "/lib/modules/$KVER/build/.config" ]
    then
        echo "Kernel headers missing!"
        return $ERROR
    fi

#check if GCC is in path
    if [ x"$GCC" == x ]
    then
        echo "GCC not installed!"
        return $ERROR
    fi

#check if gcc version matches the kernel gcc version
    gccvers="`$GCC --version | head -n 1 | sed 's/^[^ ]* [^ ]* \([2-4]..*\)$/\1/'`"
    ret="`cat /proc/version | grep "$gccvers"`"

    if [ x"$ret" == x ]
    then
        echo "Your current GCC version doesn't match the version your kernel was compiled with."
        echo "The build modules Will most probably not load into the running kernel."
    fi

#cd into driver build directory
    mkdir -p "$D_DIR/${MODULE[$1]}"
    if [ ! -d "$D_DIR/${MODULE[$1]}" ]
    then
        echo "Directory \"$D_DIR/${MODULE[$1]}\" not available."
        return $ERROR
    fi

    cd "$D_DIR/${MODULE[$1]}"

#run the custom installscript
    if [ x"${DI_INIT[$1]}" != x ]
    then
        ${DI_INIT[$1]} $1
    fi

    install_action $1

    ret=$?

    echo "Running \"depmod -ae\"..."
    depmod -ae

    return $ret
}

removeDriver() {
#check if argument is out of range
    if [ "$1" -lt 0 -o "$1" -ge "$DCOUNT" ]
    then
        echo "Invalid driver number!"
        return $ERROR
    fi

#check if its in-kernel
    isInKernel $1
    if [ $? -eq $YES ]
    then
        echo "Cannot remove drivers build into the kernel!"
        exit
    fi

#check if its installed
    isInstalled $1
    if [ $? -eq $NO ]
    then
        echo "This driver isn't installed and thus cannot be removed."
        exit
    fi

    echo "Starting to remove \"${DNAME[$1]}\" driver"

#check if its loaded and unload befor trying to remove
    isLoaded $1
    if [ $? -eq $YES ]
    then
        unloadDriver $1
        if [ $? -eq $NO -o $? -eq $ERROR ]
        then
            echo "Couldn't unload the driver."
        fi
    fi

#loop through the modules, find and rm them
    for i in ${DMODULES[$1]}
    do
        if [ -f "`$MODPROBE -l | grep $i\.ko`" ]
        then
            rm -i "`$MODPROBE -l | grep $i\.ko`"
        fi
    done

    echo "Running \"depmod -ae\"..."
    depmod -ae

    return $YES
}

detectAdapters() {
    echo
#usb
    if [ x"$LSUSB" != x ]
    then
        i=0
        while [ $i -lt $DCOUNT ]
        do
            if [ x"${DETECT_USB[$i]}" != x ]
            then
                if [ x"`$LSUSB -vvv | grep "${DETECT_USB[$i]}"`" != x ]
                then
                    echo "Found \"${DNAME[$i]}\" device: (${DMODULE[$i]})"
                    echo "`$LSUSB -vvv | grep "${DETECT_USB[$i]}"`"
                    echo
                fi
            fi
            i=$(($i+1))
        done
    fi

#pci
    if [ x"$LSPCI" != x ]
    then
        i=0
        while [ $i -lt $DCOUNT ]
        do
            if [ x"${DETECT_PCI[$i]}" != x ]
            then
                if [ x"`$LSPCI | grep "${DETECT_PCI[$i]}"`" != x ]
                then
                    echo "Found \"${DNAME[$i]}\" device: (${DMODULE[$i]})"
                    echo "`$LSPCI -vvv | grep ${DETECT_PCI[$i]}`"
                    echo
                fi
            fi
            i=$(($i+1))
        done
    fi

#pcmcia
    if [ x"$LSPCMCIA" != x ]
    then
        i=0
        while [ $i -lt $DCOUNT ]
        do
            if [ x"${DETECT_CS[$i]}" != x ]
            then
                if [ x"`$LSPCMCIA -vvv | grep "${DETECT_CS[$i]}"`" != x ]
                then
                    echo "Found \"${DNAME[$i]}\" device: (${DMODULE[$i]})"
                    echo "`$LSPCMCIA -vvv | grep "${DETECT_CS[$i]}"`"
                    echo
                fi
            fi
            i=$(($i+1))
        done
    fi

#generic
    GENERIC="wireless\|80211\|80211\.11\|wifi"
    if [ x"`$LSUSB -vvv | grep -i "$GENERIC"`" != x ]
    then
        echo "USB devices (generic detection):"
        echo "`$LSUSB -vvv | grep -i "$GENERIC"`"
    fi

    if [ x"`$LSPCI | grep -i "$GENERIC"`" != x ]
    then
        echo "PCI devices (generic detection):"
        echo "`$LSPCI | grep -i "$GENERIC"`"
    fi

    if [ x"`$LSPCMCIA -vvv | grep -i "$GENERIC"`" != x ]
    then
        echo "PCMCIA devices (generic detection):"
        echo "`$LSPCMCIA -vvv | grep -i "$GENERIC"`"
    fi

    return $YES
}

name2num() {
    if [ x"$1" == x ]
    then
        return $ERROR
    fi

    i=0
    while [ $i -lt "$DCOUNT" ]
    do
        for j in ${DMODULES[$i]}
        do
            if [ x"`echo "$1 " | grep -i "$j "`" != x ]
            then
                return $i
            fi
        done
        i=$(($i+1))
    done

    return $ERROR
}

usage() {
    printf "Found kernel: $KMAJOR.$KMINOR.$KPATCH\n"
    printf "usage: `basename $0` <command> [drivernumber]\n"
    printf "\tvalid commands:\n"
    printf "\t\tsupported\t- lists all supported drivers\n"
    printf "\t\tkernel\t\t- lists all in-kernel drivers\n"
    printf "\t\tinstalled\t- lists all installed drivers\n"
    printf "\t\tloaded\t\t- lists all loaded drivers\n"
    printf "\t\t-----------------------------------------------\n"
    printf "\t\tload <drivernum>\t- loads a driver\n"
    printf "\t\tunload <drivernum>\t- unloads a driver\n"
    printf "\t\tinstall <drivernum>\t- installs a driver\n"
    printf "\t\tremove <drivernum>\t- removes a driver\n"
    printf "\t\t-----------------------------------------------\n"
    printf "\t\tdetails <drivernum>\t- prints driver details\n"
    printf "\t\tdetect\t\t- detects wireless cards\n"
    echo
    exit
}

#checking main argument(s)
if [ x"$1" == x ]
then
    usage
fi

if [ x"$1" == "xsupported" ]
then
    listSupportedDrivers
    exit
fi

if [ x"$1" == "xinstalled" ]
then
    listInstalledDrivers
    exit
fi

if [ x"$1" == "xloaded" ]
then
    listLoadedDrivers
    exit
fi

if [ x"$1" == "xkernel" ]
then
    listKernelDrivers
    exit
fi

if [ x"$1" == "xdetect" ]
then
    detectAdapters
    exit
fi

if [ x"$1" == "xremove" ]
then
    if [ x$2 == "x" ]
    then
        echo "You need to specify a drivernumber."
        exit
    fi

    name2num $2
    num=$?

    if [ $num -eq $ERROR ]
    then
        if [ $2 -ge 0 -a $2 -lt $DCOUNT ] 2>/dev/null
        then
            num=$2
        else
            echo "Invalid driver!"
            exit
        fi
    fi

    echo "Driver \"${DNAME[$num]}\" specified for removing."

    removeDriver $num
    if [ $? -eq $YES ]
    then
        echo "Removed driver \"${DNAME[$num]}\" successfully"
    else
        echo "Failed to remove the driver."
    fi
    exit
fi

if [ x"$1" == "xinstall" ]
then
    if [ x$2 == "x" ]
    then
        echo "You need to specify a drivernumber."
        exit
    fi

    name2num $2
    num=$?

    if [ $num -eq $ERROR ]
    then
        if [ $2 -ge 0 -a $2 -lt $DCOUNT ] 2>/dev/null
        then
            num=$2
        else
            echo "Invalid driver!"
            exit
        fi
    fi

    echo "Driver \"${DNAME[$num]}\" specified for installation."

    installDriver $num
    if [ $? -eq $YES ]
    then
        echo "Installed driver \"${DNAME[$num]}\" successfully"
    else
        echo "Failed to install the driver."
        echo "Look through \"$LOGFILE\" for errors."
    fi
    exit
fi

if [ x"$1" == "xload" ]
then
    if [ x$2 == "x" ]
    then
        echo "You need to specify a drivernumber."
        exit
    fi

    name2num $2
    num=$?

    if [ $num -eq $ERROR ]
    then
        if [ $2 -ge 0 -a $2 -lt $DCOUNT ] 2>/dev/null
        then
            num=$2
        else
            echo "Invalid driver!"
            exit
        fi
    fi

    echo "Driver \"${DNAME[$num]}\" specified for loading."

    loadDriver $num
    if [ $? -eq $YES ]
    then
        echo "Loaded driver \"${DNAME[$num]}\" successfully"
    else
        echo "Failed to load the driver."
    fi
    exit
fi

if [ x"$1" == "xunload" ]
then
    if [ x$2 == "x" ]
    then
        echo "You need to specify a drivernumber."
        exit
    fi

    name2num $2
    num=$?

    if [ $num -eq $ERROR ]
    then
        if [ $2 -ge 0 -a $2 -lt $DCOUNT ] 2>/dev/null
        then
            num=$2
        else
            echo "Invalid driver!"
            exit
        fi
    fi

    echo "Driver \"${DNAME[$num]}\" specified for unloading."

    unloadDriver $num
    if [ $? -eq $YES ]
    then
        echo "Unloaded driver \"${DNAME[$num]}\" successfully"
    else
        echo "Failed to unload the driver."
    fi
    exit
fi

if [ x"$1" == "xdetails" ]
then
    if [ x$2 == "x" ]
    then
        echo "You need to specify a driver."
        exit
    fi

    name2num $2
    num=$?

    if [ $num -eq $ERROR ]
    then
        if [ $2 -ge 0 -a $2 -lt $DCOUNT ] 2>/dev/null
        then
            num=$2
        else
            echo "Invalid driver!"
            exit
        fi
    fi

    echo "Driver details for: \"${DNAME[$num]}\""
    echo

    printf "Compiled into kernel:\t"
    isInKernel $num
    if [ $? -eq $YES ]
    then
        echo "YES"
    else
        echo "No"
    fi

    printf "Installed:\t\t"
    isInstalled $num
    if [ $? -eq $YES ]
    then
        echo "YES"
    else
        echo "No"
    fi

    printf "Loaded:\t\t\t"
    isLoaded $num
    if [ $? -eq $YES ]
    then
        echo "YES"
    else
        echo "No"
    fi

    echo
    echo "Modules:"

    for i in ${DMODULES[$num]}
    do
        echo -n "$i "
    done
    echo
    echo

    echo "Files:"
    for i in ${DMODULES[$num]}
    do
        $MODPROBE -l | grep $i\.ko
    done
    echo

    modinfo ${DMODULE[$num]} | grep "^ver\|^depends"

    echo
    if [ x${DSITE[$num]} != x ]
    then
        echo "More infos on:"
        echo ${DSITE[$num]}
    fi
    exit
fi

usage